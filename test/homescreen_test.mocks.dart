// Mocks generated by Mockito 5.0.17 from annotations
// in carbpro/test/homescreen_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:carbpro/datamodels/item.dart' as _i4;
import 'package:carbpro/datamodels/itemchild.dart' as _i5;
import 'package:carbpro/handler/databasehandler.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [DatabaseHandler].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseHandler extends _i1.Mock implements _i2.DatabaseHandler {
  MockDatabaseHandler() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.Item>> getItems() =>
      (super.noSuchMethod(Invocation.method(#getItems, []),
              returnValue: Future<List<_i4.Item>>.value(<_i4.Item>[]))
          as _i3.Future<List<_i4.Item>>);
  @override
  _i3.Future<int> addItem(String? newName) =>
      (super.noSuchMethod(Invocation.method(#addItem, [newName]),
          returnValue: Future<int>.value(0)) as _i3.Future<int>);
  @override
  _i3.Future<int> deleteItem(int? id) =>
      (super.noSuchMethod(Invocation.method(#deleteItem, [id]),
          returnValue: Future<int>.value(0)) as _i3.Future<int>);
  @override
  _i3.Future<int> deleteAllChildren(int? parentID) =>
      (super.noSuchMethod(Invocation.method(#deleteAllChildren, [parentID]),
          returnValue: Future<int>.value(0)) as _i3.Future<int>);
  @override
  _i3.Future<int> changeItemName(int? id, String? newName) =>
      (super.noSuchMethod(Invocation.method(#changeItemName, [id, newName]),
          returnValue: Future<int>.value(0)) as _i3.Future<int>);
  @override
  _i3.Future<List<_i5.ItemChild>> getChildren(int? parentID) =>
      (super.noSuchMethod(Invocation.method(#getChildren, [parentID]),
              returnValue: Future<List<_i5.ItemChild>>.value(<_i5.ItemChild>[]))
          as _i3.Future<List<_i5.ItemChild>>);
  @override
  _i3.Future<int> addItemChild(_i5.ItemChild? itemChild) =>
      (super.noSuchMethod(Invocation.method(#addItemChild, [itemChild]),
          returnValue: Future<int>.value(0)) as _i3.Future<int>);
  @override
  _i3.Future<int> deleteItemChild(_i5.ItemChild? itemChild) =>
      (super.noSuchMethod(Invocation.method(#deleteItemChild, [itemChild]),
          returnValue: Future<int>.value(0)) as _i3.Future<int>);
  @override
  _i3.Future<int> updateItemChild(_i5.ItemChild? itemChild) =>
      (super.noSuchMethod(Invocation.method(#updateItemChild, [itemChild]),
          returnValue: Future<int>.value(0)) as _i3.Future<int>);
}
