// Mocks generated by Mockito 5.0.17 from annotations
// in carbpro/test/detailscreen_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i7;
import 'dart:io' as _i4;

import 'package:carbpro/datamodels/item.dart' as _i2;
import 'package:carbpro/datamodels/itemchild.dart' as _i8;
import 'package:carbpro/handler/databasehandler.dart' as _i6;
import 'package:carbpro/handler/storagehandler.dart' as _i9;
import 'package:flutter/cupertino.dart' as _i3;
import 'package:image_picker/image_picker.dart' as _i11;
import 'package:image_picker_platform_interface/image_picker_platform_interface.dart'
    as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:permission_handler/permission_handler.dart' as _i10;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeItem_0 extends _i1.Fake implements _i2.Item {}

class _FakeImage_1 extends _i1.Fake implements _i3.Image {
  @override
  String toString({_i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeFile_2 extends _i1.Fake implements _i4.File {}

class _FakeLostData_3 extends _i1.Fake implements _i5.LostData {}

class _FakeLostDataResponse_4 extends _i1.Fake implements _i5.LostDataResponse {
}

/// A class which mocks [DatabaseHandler].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseHandler extends _i1.Mock implements _i6.DatabaseHandler {
  MockDatabaseHandler() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<List<_i2.Item>> getItems() =>
      (super.noSuchMethod(Invocation.method(#getItems, []),
              returnValue: Future<List<_i2.Item>>.value(<_i2.Item>[]))
          as _i7.Future<List<_i2.Item>>);
  @override
  _i7.Future<_i2.Item> getItem(int? id) =>
      (super.noSuchMethod(Invocation.method(#getItem, [id]),
              returnValue: Future<_i2.Item>.value(_FakeItem_0()))
          as _i7.Future<_i2.Item>);
  @override
  _i7.Future<int> addItem(String? newName) =>
      (super.noSuchMethod(Invocation.method(#addItem, [newName]),
          returnValue: Future<int>.value(0)) as _i7.Future<int>);
  @override
  _i7.Future<int> deleteItem(int? id) =>
      (super.noSuchMethod(Invocation.method(#deleteItem, [id]),
          returnValue: Future<int>.value(0)) as _i7.Future<int>);
  @override
  _i7.Future<int> deleteAllChildren(int? parentID) =>
      (super.noSuchMethod(Invocation.method(#deleteAllChildren, [parentID]),
          returnValue: Future<int>.value(0)) as _i7.Future<int>);
  @override
  _i7.Future<int> changeItemName(int? id, String? newName) =>
      (super.noSuchMethod(Invocation.method(#changeItemName, [id, newName]),
          returnValue: Future<int>.value(0)) as _i7.Future<int>);
  @override
  _i7.Future<List<_i8.ItemChild>> getChildren(int? parentID) =>
      (super.noSuchMethod(Invocation.method(#getChildren, [parentID]),
              returnValue: Future<List<_i8.ItemChild>>.value(<_i8.ItemChild>[]))
          as _i7.Future<List<_i8.ItemChild>>);
  @override
  _i7.Future<int> addItemChild(_i8.ItemChild? itemChild) =>
      (super.noSuchMethod(Invocation.method(#addItemChild, [itemChild]),
          returnValue: Future<int>.value(0)) as _i7.Future<int>);
  @override
  _i7.Future<int> deleteItemChild(_i8.ItemChild? itemChild) =>
      (super.noSuchMethod(Invocation.method(#deleteItemChild, [itemChild]),
          returnValue: Future<int>.value(0)) as _i7.Future<int>);
  @override
  _i7.Future<int> updateItemChild(_i8.ItemChild? itemChild) =>
      (super.noSuchMethod(Invocation.method(#updateItemChild, [itemChild]),
          returnValue: Future<int>.value(0)) as _i7.Future<int>);
}

/// A class which mocks [StorageHandler].
///
/// See the documentation for Mockito's code generation for more information.
class MockStorageHandler extends _i1.Mock implements _i9.StorageHandler {
  MockStorageHandler() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i4.Directory?> getExternalStorageDirectory() =>
      (super.noSuchMethod(Invocation.method(#getExternalStorageDirectory, []),
              returnValue: Future<_i4.Directory?>.value())
          as _i7.Future<_i4.Directory?>);
  @override
  _i7.Future<_i3.Image> getImage(String? filepath) =>
      (super.noSuchMethod(Invocation.method(#getImage, [filepath]),
              returnValue: Future<_i3.Image>.value(_FakeImage_1()))
          as _i7.Future<_i3.Image>);
  @override
  _i7.Future<_i4.File> copyFile(String? filepath, String? newFilePath) =>
      (super.noSuchMethod(Invocation.method(#copyFile, [filepath, newFilePath]),
              returnValue: Future<_i4.File>.value(_FakeFile_2()))
          as _i7.Future<_i4.File>);
  @override
  _i7.Future<void> deleteFile(String? filepath) =>
      (super.noSuchMethod(Invocation.method(#deleteFile, [filepath]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i7.Future<void>);
  @override
  _i7.Future<bool> getPermission(
          _i10.Permission? permission, _i9.PlatformWrapper? wrapper) =>
      (super.noSuchMethod(
          Invocation.method(#getPermission, [permission, wrapper]),
          returnValue: Future<bool>.value(false)) as _i7.Future<bool>);
}

/// A class which mocks [ImagePicker].
///
/// See the documentation for Mockito's code generation for more information.
class MockImagePicker extends _i1.Mock implements _i11.ImagePicker {
  MockImagePicker() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i5.PickedFile?> getImage(
          {_i5.ImageSource? source,
          double? maxWidth,
          double? maxHeight,
          int? imageQuality,
          _i5.CameraDevice? preferredCameraDevice = _i5.CameraDevice.rear}) =>
      (super.noSuchMethod(
              Invocation.method(#getImage, [], {
                #source: source,
                #maxWidth: maxWidth,
                #maxHeight: maxHeight,
                #imageQuality: imageQuality,
                #preferredCameraDevice: preferredCameraDevice
              }),
              returnValue: Future<_i5.PickedFile?>.value())
          as _i7.Future<_i5.PickedFile?>);
  @override
  _i7.Future<List<_i5.PickedFile>?> getMultiImage(
          {double? maxWidth, double? maxHeight, int? imageQuality}) =>
      (super.noSuchMethod(
              Invocation.method(#getMultiImage, [], {
                #maxWidth: maxWidth,
                #maxHeight: maxHeight,
                #imageQuality: imageQuality
              }),
              returnValue: Future<List<_i5.PickedFile>?>.value())
          as _i7.Future<List<_i5.PickedFile>?>);
  @override
  _i7.Future<_i5.PickedFile?> getVideo(
          {_i5.ImageSource? source,
          _i5.CameraDevice? preferredCameraDevice = _i5.CameraDevice.rear,
          Duration? maxDuration}) =>
      (super.noSuchMethod(
              Invocation.method(#getVideo, [], {
                #source: source,
                #preferredCameraDevice: preferredCameraDevice,
                #maxDuration: maxDuration
              }),
              returnValue: Future<_i5.PickedFile?>.value())
          as _i7.Future<_i5.PickedFile?>);
  @override
  _i7.Future<_i5.LostData> getLostData() =>
      (super.noSuchMethod(Invocation.method(#getLostData, []),
              returnValue: Future<_i5.LostData>.value(_FakeLostData_3()))
          as _i7.Future<_i5.LostData>);
  @override
  _i7.Future<_i5.XFile?> pickImage(
          {_i5.ImageSource? source,
          double? maxWidth,
          double? maxHeight,
          int? imageQuality,
          _i5.CameraDevice? preferredCameraDevice = _i5.CameraDevice.rear}) =>
      (super.noSuchMethod(
          Invocation.method(#pickImage, [], {
            #source: source,
            #maxWidth: maxWidth,
            #maxHeight: maxHeight,
            #imageQuality: imageQuality,
            #preferredCameraDevice: preferredCameraDevice
          }),
          returnValue: Future<_i5.XFile?>.value()) as _i7.Future<_i5.XFile?>);
  @override
  _i7.Future<List<_i5.XFile>?> pickMultiImage(
          {double? maxWidth, double? maxHeight, int? imageQuality}) =>
      (super.noSuchMethod(
              Invocation.method(#pickMultiImage, [], {
                #maxWidth: maxWidth,
                #maxHeight: maxHeight,
                #imageQuality: imageQuality
              }),
              returnValue: Future<List<_i5.XFile>?>.value())
          as _i7.Future<List<_i5.XFile>?>);
  @override
  _i7.Future<_i5.XFile?> pickVideo(
          {_i5.ImageSource? source,
          _i5.CameraDevice? preferredCameraDevice = _i5.CameraDevice.rear,
          Duration? maxDuration}) =>
      (super.noSuchMethod(
          Invocation.method(#pickVideo, [], {
            #source: source,
            #preferredCameraDevice: preferredCameraDevice,
            #maxDuration: maxDuration
          }),
          returnValue: Future<_i5.XFile?>.value()) as _i7.Future<_i5.XFile?>);
  @override
  _i7.Future<_i5.LostDataResponse> retrieveLostData() =>
      (super.noSuchMethod(Invocation.method(#retrieveLostData, []),
              returnValue:
                  Future<_i5.LostDataResponse>.value(_FakeLostDataResponse_4()))
          as _i7.Future<_i5.LostDataResponse>);
}
